"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const shortid_1=__importDefault(require("shortid")),supertest_1=__importDefault(require("supertest")),chai_1=require("chai"),app_1=__importDefault(require("../../src/app")),mongoose_service_1=__importDefault(require("../../src/common/services/mongoose.service")),mongoose=mongoose_service_1.default.getMongoose();let firstUserIdTest;const firstUserBody={email:`test.${shortid_1.default.generate()}@gmail.com`,password:shortid_1.default.generate()};let accessToken,refreshToken;const newFirstName="Joseph",newFirstName2="Paul",newLastName2="Varro";describe("users and auth endpoints",(function(){let e;this.timeout(1e4),before((function(){e=supertest_1.default.agent(app_1.default)})),it("should allow a POST to /users",(async function(){const t=await e.post("/users").send(firstUserBody);(0,chai_1.expect)(t.status).to.equal(201),(0,chai_1.expect)(t.body).not.to.be.empty,(0,chai_1.expect)(t.body).to.be.an("object"),(0,chai_1.expect)(t.body.id).to.be.a("string"),firstUserIdTest=t.body.id})),it("should allow a POST to /auth",(async function(){const t=await e.post("/auth").send(firstUserBody);(0,chai_1.expect)(t.status).to.equal(201),(0,chai_1.expect)(t.body).not.to.be.empty,(0,chai_1.expect)(t.body).to.be.an("object"),(0,chai_1.expect)(t.body.accessToken).to.be.a("string"),accessToken=t.body.accessToken,refreshToken=t.body.refreshToken})),it("should allow a GET from /users/:userId with an access token",(async function(){const t=await e.get(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send();(0,chai_1.expect)(t.status).to.equal(200),(0,chai_1.expect)(t.body).not.to.be.empty,(0,chai_1.expect)(t.body).to.be.an("object"),(0,chai_1.expect)(t.body._id).to.be.a("string"),(0,chai_1.expect)(t.body._id).to.equal(firstUserIdTest),(0,chai_1.expect)(t.body.email).to.equal(firstUserBody.email)})),describe("with a valid access token",(function(){it("should disallow a GET to /users",(async function(){const t=await e.get("/users").set({Authorization:`Bearer ${accessToken}`}).send();(0,chai_1.expect)(t.status).to.equal(403)})),it("should disallow a PATCH to /users/:userId",(async function(){const t=await e.patch(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send({email:firstUserBody.email,firstName:"Joseph"});(0,chai_1.expect)(t.status).to.equal(403)})),it("should disallow a PUT to /users/:userId with an nonexistent ID",(async function(){const t=await e.put("/users/i-do-not-exist").set({Authorization:`Bearer ${accessToken}`}).send({email:firstUserBody.email,password:firstUserBody.password,firstName:"Marco",lastName:"Shiva",permissionFlag:8});(0,chai_1.expect)(t.status).to.equal(404)})),it("should disallow a PUT to /users/:userId trying to change the permission flags",(async function(){const t=await e.put(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send({email:firstUserBody.email,password:firstUserBody.password,firstName:"Marco",lastName:"Shiva",permissionFlag:8});(0,chai_1.expect)(t.status).to.equal(400),(0,chai_1.expect)(t.body.errors).to.be.an("array"),(0,chai_1.expect)(t.body.errors).to.have.length(1),(0,chai_1.expect)(t.body.errors[0]).to.equal("User cannot change permission flags")})),it("should allow a PUT to /users/:userId/permissionFlag/2 for testing",(async function(){const t=await e.put(`/users/${firstUserIdTest}/permissionFlag/2`).set({Authorization:`Bearer ${accessToken}`}).send({});(0,chai_1.expect)(t.status).to.equal(204)})),describe("with a new set of permission flags",(function(){it("should allow a POST to /auth/refresh-token",(async function(){const t=await e.post("/auth/refresh-token").set({Authorization:`Bearer ${accessToken}`}).send({refreshToken:refreshToken});(0,chai_1.expect)(t.status).to.equal(201),(0,chai_1.expect)(t.body).not.to.be.empty,(0,chai_1.expect)(t.body).to.be.an("object"),(0,chai_1.expect)(t.body.accessToken).to.be.a("string"),accessToken=t.body.accessToken,refreshToken=t.body.refreshToken})),it("should allow a PUT to /users/:userId to change first and last names",(async function(){const t=await e.put(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send({email:firstUserBody.email,password:firstUserBody.password,firstName:"Paul",lastName:"Varro",permissionFlag:2});(0,chai_1.expect)(t.status).to.equal(204)})),it("should allow a GET from /users/:userId and should have a new full name",(async function(){const t=await e.get(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send();(0,chai_1.expect)(t.status).to.equal(200),(0,chai_1.expect)(t.body).not.to.be.empty,(0,chai_1.expect)(t.body).to.be.an("object"),(0,chai_1.expect)(t.body._id).to.be.a("string"),(0,chai_1.expect)(t.body.firstName).to.equal("Paul"),(0,chai_1.expect)(t.body.lastName).to.equal("Varro"),(0,chai_1.expect)(t.body.email).to.equal(firstUserBody.email),(0,chai_1.expect)(t.body._id).to.equal(firstUserIdTest)})),it("should allow a DELETE from /users/:userId",(async function(){const t=await e.delete(`/users/${firstUserIdTest}`).set({Authorization:`Bearer ${accessToken}`}).send();(0,chai_1.expect)(t.status).to.equal(204)}))}))})),after((function(e){app_1.default.close((function(){mongoose.connection.db.dropDatabase((function(){mongoose.connection.close(e)}))}))}))}));