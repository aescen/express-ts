"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const debug_util_1=__importDefault(require("../../utils/debug.util")),users_service_1=__importDefault(require("../services/users.service")),log=(0,debug_util_1.default)("app:users-controller");class UsersMiddleware{constructor(){this.validatePatchEmail=this.validatePatchEmail.bind(this)}async validateEmailDoesNotExist(e,s,a){return await users_service_1.default.readByEmail(e.body.email)?s.status(400).send({error:"User email already exists"}):a()}async validateEmailBelongsToUser(e,s,a){return s.locals.user._id===e.body.id?a():s.status(400).send({error:"Invalid email"})}async validatePatchEmail(e,s,a){return e.body.email?(log("Validating email",e.body.email),this.validateEmailBelongsToUser(e,s,a)):s.status(400).send({error:"Invalid email"})}async validateUserExists(e,s,a){const r=await users_service_1.default.readById(e.body.id);return r?(s.locals.user=r,a()):s.status(404).send({error:`User ${e.body.id} not found`})}async extractParamUserId(e,s,a){return e.body.id=e.params.userId,a()}async userCannotChangePermission(e,s,a){return"permissionFlag"in e.body&&e.body.permissionFlag!==s.locals.user.permissionFlag?s.status(400).send({errors:["User cannot change permission flags"]}):a()}}exports.default=new UsersMiddleware;